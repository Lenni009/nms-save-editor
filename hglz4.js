function mapKeys(e,r){if(Array.isArray(e))return e.map((e=>mapKeys(e,r)));if("object"==typeof e&&null!==e){const n={};for(const t in e){const a=r.find((e=>e.Key===t))?.Value;a?n[a]=mapKeys(e[t],r):n[t]=mapKeys(e[t],r)}return n}return e}function readFile(e){return new Promise(((r,n)=>{const t=new FileReader;t.onload=e=>r(e.target.result),t.onerror=e=>n(e),t.readAsArrayBuffer(e)}))}const Buffer=require("buffer").Buffer,LZ4=require("lz4");async function compressSave(){const e=document.getElementById("fileInput").files[0];if(!e)return void alert("Please select a file.");const r=await readFile(e),n=compress(r);downloadFile(n,e.name+".compressed")}async function decompressSave(e,r){const n=await readFile(e);let t="";const a=n.byteLength;let o,s=0;do{const e=n.slice(s),r=new Uint32Array(e,0,4)[0],a=new Uint32Array(e,4,4)[0],o=new Uint32Array(e,8,4)[0];if(4276986341!==r)return void alert("Invalid NMS Block, bad file");const i=new Buffer.from(e.slice(16));let c=Buffer.alloc(o);LZ4.decodeBlock(i,c,0,a),c=c.subarray(0,o);t+=c.toString(),s+=16+a}while(s<a);try{o=JSON.parse(t)}catch{o=JSON.parse(t.slice(0,-1))}return mapKeys(o,r)}
